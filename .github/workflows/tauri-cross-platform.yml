name: Tauri Cross-Platform Builds

on:
  workflow_dispatch:
  push:
    branches: [release]

jobs:
  # build-macos-arm:
  #   runs-on: macos-latest
  #   env:
  #     SUPABASE_URL_ENCRYPTED: ${{ secrets.SUPABASE_URL_ENCRYPTED }}
  #     SUPABASE_URL_ENCRYPTION_KEY: ${{ secrets.SUPABASE_URL_ENCRYPTION_KEY }}
  #     SUPABASE_ANON_KEY_ENCRYPTED: ${{ secrets.SUPABASE_ANON_KEY_ENCRYPTED }}
  #     SUPABASE_ANON_KEY_ENCRYPTION_KEY: ${{ secrets.SUPABASE_ANON_KEY_ENCRYPTION_KEY }}
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: pnpm/action-setup@v2
  #       with:
  #         version: 8
  #     - uses: actions/setup-node@v4
  #       with:
  #         node-version: 20
  #     - name: Install Rust (ARM)
  #       run: rustup target add aarch64-apple-darwin
  #     - name: Install dependencies
  #       run: pnpm install
  #     - name: Install Tauri CLI
  #       run: pnpm add -D @tauri-apps/cli
  #     - name: Set environment variables from package.json
  #       run: |
  #         echo "VERSION=$(node -p \"require('./package.json').version\")" >> $GITHUB_ENV
  #         echo "NAME=$(node -p \"require('./package.json').name\")" >> $GITHUB_ENV
  #         echo "IDENTIFIER=$(node -p \"require('./package.json').identifier\")" >> $GITHUB_ENV
  #         echo "DESCRIPTION=$(node -p \"require('./package.json').description\")" >> $GITHUB_ENV
  #     - name: Build SvelteKit
  #       run: pnpm build
  #     - name: Build Tauri (macOS ARM)
  #       run: pnpm tauri build --target aarch64-apple-darwin
  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: tauri-macos-arm
  #         path: src-tauri/target/aarch64-apple-darwin/release/bundle

  # build-macos-intel:
  #   runs-on: macos-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: pnpm/action-setup@v2
  #       with:
  #         version: 8
  #     - uses: actions/setup-node@v4
  #       with:
  #         node-version: 20
  #     - name: Install Rust (Intel)
  #       run: rustup target add x86_64-apple-darwin
  #     - name: Install dependencies
  #       run: pnpm install
  #     - name: Install Tauri CLI
  #       run: pnpm add -D @tauri-apps/cli
  #     - name: Build SvelteKit
  #       run: pnpm build
  #     - name: Build Tauri (macOS Intel)
  #       run: pnpm tauri build --target x86_64-apple-darwin
  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: tauri-macos-intel
  #         path: src-tauri/target/x86_64-apple-darwin/release/bundle

  # build-windows-intel:
  #   runs-on: windows-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: pnpm/action-setup@v2
  #       with:
  #         version: 8
  #     - uses: actions/setup-node@v4
  #       with:
  #         node-version: 20
  #     - name: Install Rust (Intel)
  #       run: rustup target add x86_64-pc-windows-msvc
  #     - name: Install dependencies
  #       run: pnpm install
  #     - name: Install Tauri CLI
  #       run: pnpm add -D @tauri-apps/cli
  #     - name: Build SvelteKit
  #       run: pnpm build
  #     - name: Build Tauri (Windows Intel)
  #       run: pnpm tauri build --target x86_64-pc-windows-msvc
  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: tauri-windows-intel
  #         path: src-tauri/target/x86_64-pc-windows-msvc/release/bundle

  # build-windows-arm:
  #   runs-on: windows-latest
  #   steps:
  #     - uses: actions/checkout@v4
  #     - uses: pnpm/action-setup@v2
  #       with:
  #         version: 8
  #     - uses: actions/setup-node@v4
  #       with:
  #         node-version: 20
  #     - name: Install Rust (ARM)
  #       run: rustup target add aarch64-pc-windows-msvc
  #     - name: Install dependencies
  #       run: pnpm install
  #     - name: Install Tauri CLI
  #       run: pnpm add -D @tauri-apps/cli
  #     - name: Build SvelteKit
  #       run: pnpm build
  #     - name: Build Tauri (Windows ARM)
  #       run: pnpm tauri build --target aarch64-pc-windows-msvc
  #     - uses: actions/upload-artifact@v4
  #       with:
  #         name: tauri-windows-arm
  #         path: src-tauri/target/aarch64-pc-windows-msvc/release/bundle

  build-ubuntu-intel:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Print OS version and search for webkit packages
        run: |
          cat /etc/os-release
          apt-cache search webkit
      - name: Enable universe repo and install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository universe
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-dev build-essential curl wget libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev pkg-config libglib2.0-dev
      - name: Install Rust (Intel)
        run: rustup target add x86_64-unknown-linux-gnu
      - name: Install dependencies
        run: pnpm install
      - name: Install Tauri CLI
        run: pnpm add -D @tauri-apps/cli
      - name: Build SvelteKit
        run: pnpm build
      - name: Build Tauri (Ubuntu Intel)
        run: pnpm tauri build --target x86_64-unknown-linux-gnu || echo "Ubuntu Intel build failed"
      - uses: actions/upload-artifact@v4
        if: success() && always()
        with:
          name: tauri-ubuntu-intel
          path: src-tauri/target/x86_64-unknown-linux-gnu/release/bundle

  build-ubuntu-arm:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: pnpm/action-setup@v2
        with:
          version: 8
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - name: Print OS version and search for webkit packages
        run: |
          cat /etc/os-release
          apt-cache search webkit
      - name: Enable universe repo and install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y software-properties-common
          sudo add-apt-repository universe
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-dev build-essential curl wget libssl-dev libgtk-3-dev libayatana-appindicator3-dev librsvg2-dev pkg-config libglib2.0-dev
      - name: Install Rust (ARM)
        run: rustup target add aarch64-unknown-linux-gnu
      - name: Install dependencies
        run: pnpm install
      - name: Install Tauri CLI
        run: pnpm add -D @tauri-apps/cli
      - name: Build SvelteKit
        run: pnpm build
      - name: Build Tauri (Ubuntu ARM)
        run: pnpm tauri build --target aarch64-unknown-linux-gnu || echo "Ubuntu ARM build failed"
      - uses: actions/upload-artifact@v4
        if: success() && always()
        with:
          name: tauri-ubuntu-arm
          path: src-tauri/target/aarch64-unknown-linux-gnu/release/bundle

  release:
    needs:
      - build-ubuntu-intel
      - build-ubuntu-arm
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Zip artifacts if present
        run: |
          for dir in tauri-macos-arm tauri-macos-intel tauri-windows-intel tauri-windows-arm tauri-ubuntu-intel tauri-ubuntu-arm; do
            if [ -d "artifacts/$dir" ]; then
              cd "artifacts/$dir"
              zip -r "../../$dir.zip" .
              cd - > /dev/null
            fi
          done

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}-tauri-release-${{ github.run_number }}
          release_name: "Tauri Cross-Platform Release ${{ github.run_number }}"
          draft: false
          prerelease: false

      - name: Upload artifacts to Release
        run: |
          for zip in tauri-macos-arm.zip tauri-macos-intel.zip tauri-windows-intel.zip tauri-windows-arm.zip tauri-ubuntu-intel.zip tauri-ubuntu-arm.zip; do
            if [ -f "$zip" ]; then
              gh release upload "${{ github.ref_name }}-tauri-release-${{ github.run_number }}" "$zip" --clobber
            fi
          done
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
